// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package HTTPRespCall

import (
	flatbuffers "github.com/google/flatbuffers/go"

	A6 "github.com/api7/ext-plugin-proto/go/A6"
)

type Req struct {
	_tab flatbuffers.Table
}

func GetRootAsReq(buf []byte, offset flatbuffers.UOffsetT) *Req {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Req{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsReq(buf []byte, offset flatbuffers.UOffsetT) *Req {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Req{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Req) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Req) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Req) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Req) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Req) Status() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Req) MutateStatus(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *Req) Headers(obj *A6.TextEntry, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Req) HeadersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Req) ConfToken() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Req) MutateConfToken(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func ReqStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ReqAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func ReqAddStatus(builder *flatbuffers.Builder, status uint16) {
	builder.PrependUint16Slot(1, status, 0)
}
func ReqAddHeaders(builder *flatbuffers.Builder, headers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(headers), 0)
}
func ReqStartHeadersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ReqAddConfToken(builder *flatbuffers.Builder, confToken uint32) {
	builder.PrependUint32Slot(3, confToken, 0)
}
func ReqEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
