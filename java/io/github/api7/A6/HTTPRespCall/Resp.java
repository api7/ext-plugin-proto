// automatically generated by the FlatBuffers compiler, do not modify

package io.github.api7.A6.HTTPRespCall;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Resp extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Resp getRootAsResp(ByteBuffer _bb) { return getRootAsResp(_bb, new Resp()); }
  public static Resp getRootAsResp(ByteBuffer _bb, Resp obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Resp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long id() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int status() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public io.github.api7.A6.TextEntry headers(int j) { return headers(new io.github.api7.A6.TextEntry(), j); }
  public io.github.api7.A6.TextEntry headers(io.github.api7.A6.TextEntry obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int headersLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public io.github.api7.A6.TextEntry.Vector headersVector() { return headersVector(new io.github.api7.A6.TextEntry.Vector()); }
  public io.github.api7.A6.TextEntry.Vector headersVector(io.github.api7.A6.TextEntry.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int body(int j) { int o = __offset(10); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int bodyLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector bodyVector() { return bodyVector(new ByteVector()); }
  public ByteVector bodyVector(ByteVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer bodyAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer bodyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createResp(FlatBufferBuilder builder,
      long id,
      int status,
      int headersOffset,
      int bodyOffset) {
    builder.startTable(4);
    Resp.addBody(builder, bodyOffset);
    Resp.addHeaders(builder, headersOffset);
    Resp.addId(builder, id);
    Resp.addStatus(builder, status);
    return Resp.endResp(builder);
  }

  public static void startResp(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addId(FlatBufferBuilder builder, long id) { builder.addInt(0, (int)id, (int)0L); }
  public static void addStatus(FlatBufferBuilder builder, int status) { builder.addShort(1, (short)status, (short)0); }
  public static void addHeaders(FlatBufferBuilder builder, int headersOffset) { builder.addOffset(2, headersOffset, 0); }
  public static int createHeadersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startHeadersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBody(FlatBufferBuilder builder, int bodyOffset) { builder.addOffset(3, bodyOffset, 0); }
  public static int createBodyVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createBodyVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startBodyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endResp(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Resp get(int j) { return get(new Resp(), j); }
    public Resp get(Resp obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

