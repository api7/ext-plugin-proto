// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Info, unionToInfo, unionListToInfo } from '../../a6/extra-info/info';


export class Req {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Req {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsReq(bb:flatbuffers.ByteBuffer, obj?:Req):Req {
  return (obj || new Req()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsReq(bb:flatbuffers.ByteBuffer, obj?:Req):Req {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Req()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

infoType():Info {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Info.NONE;
}

info<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startReq(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addInfoType(builder:flatbuffers.Builder, infoType:Info) {
  builder.addFieldInt8(0, infoType, Info.NONE);
}

static addInfo(builder:flatbuffers.Builder, infoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, infoOffset, 0);
}

static endReq(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createReq(builder:flatbuffers.Builder, infoType:Info, infoOffset:flatbuffers.Offset):flatbuffers.Offset {
  Req.startReq(builder);
  Req.addInfoType(builder, infoType);
  Req.addInfo(builder, infoOffset);
  return Req.endReq(builder);
}
}
