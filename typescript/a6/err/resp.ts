// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Code } from '../../a6/err/code';


export class Resp {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Resp {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResp(bb:flatbuffers.ByteBuffer, obj?:Resp):Resp {
  return (obj || new Resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResp(bb:flatbuffers.ByteBuffer, obj?:Resp):Resp {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

code():Code {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Code.BAD_REQUEST;
}

static startResp(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addCode(builder:flatbuffers.Builder, code:Code) {
  builder.addFieldInt8(0, code, Code.BAD_REQUEST);
}

static endResp(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResp(builder:flatbuffers.Builder, code:Code):flatbuffers.Offset {
  Resp.startResp(builder);
  Resp.addCode(builder, code);
  return Resp.endResp(builder);
}
}
