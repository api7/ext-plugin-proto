// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Action, unionToAction, unionListToAction } from '../../a6/h-t-t-p-req-call/action';


export class Resp {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Resp {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResp(bb:flatbuffers.ByteBuffer, obj?:Resp):Resp {
  return (obj || new Resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResp(bb:flatbuffers.ByteBuffer, obj?:Resp):Resp {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Resp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

actionType():Action {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Action.NONE;
}

action<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startResp(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addActionType(builder:flatbuffers.Builder, actionType:Action) {
  builder.addFieldInt8(1, actionType, Action.NONE);
}

static addAction(builder:flatbuffers.Builder, actionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, actionOffset, 0);
}

static endResp(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResp(builder:flatbuffers.Builder, id:number, actionType:Action, actionOffset:flatbuffers.Offset):flatbuffers.Offset {
  Resp.startResp(builder);
  Resp.addId(builder, id);
  Resp.addActionType(builder, actionType);
  Resp.addAction(builder, actionOffset);
  return Resp.endResp(builder);
}
}
