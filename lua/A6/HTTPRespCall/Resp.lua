-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: HTTPRespCall

local flatbuffers = require('flatbuffers')

local Resp = {} -- the module
local Resp_mt = {} -- the class metatable

function Resp.New()
    local o = {}
    setmetatable(o, {__index = Resp_mt})
    return o
end
function Resp.GetRootAsResp(buf, offset)
    if type(buf) == "string" then
        buf = flatbuffers.binaryArray.New(buf)
    end
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = Resp.New()
    o:Init(buf, n + offset)
    return o
end
function Resp_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function Resp_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Uint32, o + self.view.pos)
    end
    return 0
end
function Resp_mt:Status()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Uint16, o + self.view.pos)
    end
    return 0
end
function Resp_mt:Headers(j)
    local o = self.view:Offset(8)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 4)
        x = self.view:Indirect(x)
        local obj = require('A6.TextEntry').New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function Resp_mt:HeadersLength()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function Resp_mt:Body(j)
    local o = self.view:Offset(10)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Uint8, a + ((j-1) * 1))
    end
    return 0
end
function Resp_mt:BodyAsString(start, stop)
    return self.view:VectorAsString(10, start, stop)
end
function Resp_mt:BodyLength()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function Resp.Start(builder) builder:StartObject(4) end
function Resp.AddId(builder, id) builder:PrependUint32Slot(0, id, 0) end
function Resp.AddStatus(builder, status) builder:PrependUint16Slot(1, status, 0) end
function Resp.AddHeaders(builder, headers) builder:PrependUOffsetTRelativeSlot(2, headers, 0) end
function Resp.StartHeadersVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function Resp.AddBody(builder, body) builder:PrependUOffsetTRelativeSlot(3, body, 0) end
function Resp.StartBodyVector(builder, numElems) return builder:StartVector(1, numElems, 1) end
function Resp.End(builder) return builder:EndObject() end

return Resp -- return the module