-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: ExtraInfo

local flatbuffers = require('flatbuffers')

local Resp = {} -- the module
local Resp_mt = {} -- the class metatable

function Resp.New()
    local o = {}
    setmetatable(o, {__index = Resp_mt})
    return o
end
function Resp.GetRootAsResp(buf, offset)
    if type(buf) == "string" then
        buf = flatbuffers.binaryArray.New(buf)
    end
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = Resp.New()
    o:Init(buf, n + offset)
    return o
end
function Resp_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function Resp_mt:Result(j)
    local o = self.view:Offset(4)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Uint8, a + ((j-1) * 1))
    end
    return 0
end
function Resp_mt:ResultAsString(start, stop)
    return self.view:VectorAsString(4, start, stop)
end
function Resp_mt:ResultLength()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function Resp.Start(builder) builder:StartObject(1) end
function Resp.AddResult(builder, result) builder:PrependUOffsetTRelativeSlot(0, result, 0) end
function Resp.StartResultVector(builder, numElems) return builder:StartVector(1, numElems, 1) end
function Resp.End(builder) return builder:EndObject() end

return Resp -- return the module