-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: PrepareConf

local flatbuffers = require('flatbuffers')

local Req = {} -- the module
local Req_mt = {} -- the class metatable

function Req.New()
    local o = {}
    setmetatable(o, {__index = Req_mt})
    return o
end
function Req.GetRootAsReq(buf, offset)
    if type(buf) == "string" then
        buf = flatbuffers.binaryArray.New(buf)
    end
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = Req.New()
    o:Init(buf, n + offset)
    return o
end
function Req_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function Req_mt:Conf(j)
    local o = self.view:Offset(4)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 4)
        x = self.view:Indirect(x)
        local obj = require('A6.TextEntry').New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function Req_mt:ConfLength()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function Req_mt:Key()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function Req.Start(builder) builder:StartObject(2) end
function Req.AddConf(builder, conf) builder:PrependUOffsetTRelativeSlot(0, conf, 0) end
function Req.StartConfVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function Req.AddKey(builder, key) builder:PrependUOffsetTRelativeSlot(1, key, 0) end
function Req.End(builder) return builder:EndObject() end

return Req -- return the module